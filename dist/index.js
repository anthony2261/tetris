!function(t){var e={};function s(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(r,o,function(e){return t[e]}.bind(null,o));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=2)}([function(t,e,s){"use strict";s.d(e,"a",function(){return o});const r=document.body;class o{constructor({x:t,y:e,color:s,unit:r}){this.x=t,this.y=e,this.color=s,this.unit=r}get simulateLeft(){return{x:this.x-1,y:this.y}}get simulateRight(){return{x:this.x+1,y:this.y}}get simulateDown(){return{x:this.x,y:this.y+1}}get left(){return this.x}transparent(){this.element.style.opacity="0.2"}opaque(){this.element.style.opacity="1"}draw(){let t=document.createElement("div");t.setAttribute("class",`block ${this.color}`),t.style.left=`${this.x*this.unit}px`,t.style.top=`${this.y*this.unit}px`,t.style.width=`${this.unit}px`,t.style.height=`${this.unit}px`,r.appendChild(t),this.element=t}undraw(){this.element.parentNode.removeChild(this.element)}}},,function(t,e,s){"use strict";s.r(e);var r=s(0);class o{constructor(t,e,s=0){this.currX=t,this.currY=e,this.rotation=s,this.blocks=[]}clone(){return new this.constructor(this.currX,this.currY,this.rotation)}draw(){let t=this.constructor.blockOptions[this.rotation];for(let e of t){let t=new r.a({x:e.x+this.currX,y:e.y+this.currY,color:this.constructor.color,unit:20});this.blocks.push(t),t.draw()}}undraw(){this.blocks.forEach(t=>t.undraw()),this.blocks=[]}refresh(){this.undraw(),this.draw()}moveRight(){this.currX+=1,this.refresh()}moveLeft(){this.currX-=1,this.refresh()}moveDown(){this.currY+=1,this.refresh()}saveState(){let t=["currX","currY","rotation"].reduce((t,e)=>(t[e]=this[e],t),{});this.stateSnapshot=t}rollback(){for(let[t,e]of Object.entries(this.stateSnapshot))this[t]=e;this.refresh()}rotate(){this.saveState(),this.rotation=(this.rotation+90)%360,this.refresh();let t=100,e=0;for(let s of this.blocks)s.left>e?e=s.left:s.left<t&&(t=s.left);for(let e=0;e>t;e--)this.moveRight();for(let t=0;t<=e-10;t++)this.moveLeft()}get simulateLeft(){let t=[];return this.blocks.forEach(e=>{t.push(e.simulateLeft)}),t}get simulateRight(){let t=[];return this.blocks.forEach(e=>{t.push(e.simulateRight)}),t}get simulateDown(){let t=[];return this.blocks.forEach(e=>{t.push(e.simulateDown)}),t}}class i extends o{static get color(){return"block_color_blue"}static get blockOptions(){return{0:[{x:0,y:1},{x:1,y:1},{x:2,y:1},{x:3,y:1}],90:[{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],180:[{x:0,y:2},{x:1,y:2},{x:2,y:2},{x:3,y:2}],270:[{x:1,y:0},{x:1,y:1},{x:1,y:2},{x:1,y:3}]}}}class n extends o{static get color(){return"block_color_red"}static get blockOptions(){return{0:[{x:0,y:0},{x:0,y:1},{x:1,y:1},{x:2,y:1}],90:[{x:1,y:0},{x:2,y:0},{x:1,y:1},{x:1,y:2}],180:[{x:0,y:1},{x:1,y:1},{x:2,y:1},{x:2,y:2}],270:[{x:1,y:0},{x:1,y:1},{x:1,y:2},{x:0,y:2}]}}}class l extends o{static get color(){return"block_color_orange"}static get blockOptions(){return{0:[{x:0,y:1},{x:1,y:1},{x:2,y:1},{x:2,y:0}],90:[{x:1,y:0},{x:1,y:1},{x:1,y:2},{x:2,y:2}],180:[{x:0,y:1},{x:1,y:1},{x:2,y:1},{x:0,y:2}],270:[{x:0,y:0},{x:1,y:0},{x:1,y:1},{x:1,y:2}]}}}class y extends o{static get color(){return"block_color_magenta"}static get blockOptions(){return{0:[{x:0,y:0},{x:1,y:0},{x:0,y:1},{x:1,y:1}],90:[{x:0,y:0},{x:1,y:0},{x:0,y:1},{x:1,y:1}],180:[{x:0,y:0},{x:1,y:0},{x:0,y:1},{x:1,y:1}],270:[{x:0,y:0},{x:1,y:0},{x:0,y:1},{x:1,y:1}]}}}class c extends o{static get color(){return"block_color_cyan"}static get blockOptions(){return{0:[{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:2,y:0}],90:[{x:1,y:0},{x:1,y:1},{x:2,y:1},{x:2,y:2}],180:[{x:0,y:2},{x:1,y:2},{x:1,y:1},{x:2,y:1}],270:[{x:0,y:0},{x:0,y:1},{x:1,y:1},{x:1,y:2}]}}}class a extends o{static get color(){return"block_color_lime"}static get blockOptions(){return{0:[{x:0,y:0},{x:1,y:0},{x:1,y:1},{x:2,y:1}],90:[{x:2,y:0},{x:1,y:1},{x:2,y:1},{x:1,y:2}],180:[{x:0,y:1},{x:1,y:1},{x:1,y:2},{x:2,y:2}],270:[{x:1,y:0},{x:1,y:1},{x:0,y:1},{x:0,y:2}]}}}class h extends o{static get color(){return"block_color_yellow"}static get blockOptions(){return{0:[{x:1,y:0},{x:0,y:1},{x:1,y:1},{x:2,y:1}],90:[{x:1,y:0},{x:1,y:1},{x:2,y:1},{x:1,y:2}],180:[{x:0,y:1},{x:1,y:1},{x:2,y:1},{x:1,y:2}],270:[{x:1,y:0},{x:0,y:1},{x:1,y:1},{x:1,y:2}]}}}class x extends o{static get color(){return"block_color_red"}static get blockOptions(){return{0:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2}],90:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2}],180:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2}],270:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2}]}}}class u extends o{static get color(){return"block_color_blue"}static get blockOptions(){return{0:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],90:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],180:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],270:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:2},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}]}}}class d extends o{static get color(){return"block_color_orange"}static get blockOptions(){return{0:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:3},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],90:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:3},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],180:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:3},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}],270:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:3},{x:2,y:0},{x:2,y:1},{x:2,y:2},{x:2,y:3}]}}}class g extends o{static get color(){return"block_color_lime"}static get blockOptions(){return{0:[{x:0,y:0},{x:0,y:1},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:2},{x:2,y:3}],90:[{x:0,y:0},{x:0,y:1},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:2},{x:2,y:3}],180:[{x:0,y:0},{x:0,y:1},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:2},{x:2,y:3}],270:[{x:0,y:0},{x:0,y:1},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:2},{x:2,y:3}]}}}class m extends o{static get color(){return"block_color_magenta"}static get blockOptions(){return{0:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:1.5},{x:2,y:3}],90:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:1.5},{x:2,y:3}],180:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:1.5},{x:2,y:3}],270:[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:1,y:0},{x:1,y:1.5},{x:1,y:3},{x:2,y:0},{x:2,y:1.5},{x:2,y:3}]}}}class p{constructor(t,e){this.width=t,this.height=e,this.pause=!1,this.pauseArr=[new x(4,0),new u(4,4),new d(4,8),new g(4,12),new m(4,16)],this.end=!1,this.interv=null,this.heldShape=null,this.held=!1,this.score=0,document.getElementById("score-box").innerHTML="Level: 1 <br> Score: 0",document.getElementById("game-over-screen").style.display="none",this.blocks={};for(let t=0;t<e;t++)this.blocks[`${t}`]=[]}startFunction(){if(!1===this.end){document.getElementById("start-menu-box").style.display="none";let t=[i,n,l,y,c,a,h];this.nextShape=new(t[Math.floor(Math.random()*t.length)])(15,5),this.startRound(),this.setupKeyBindings()}}run(t){document.getElementById("start-menu-box").style.display="flex",document.getElementById("game-over-screen").style.display="none",document.getElementById("start-button").addEventListener("click",this.startFunction.bind(this)),this.onDidEnd=t}startRound(){this.held=!1;let t=[i,n,l,y,c,a,h];this.currshape=this.nextShape,this.nextShape.undraw(),this.currshape.currX=4,this.currshape.currY=0,this.currshape.draw();let e=t[Math.floor(Math.random()*t.length)];this.nextShape=new e(e===y?12.75:12,5),this.nextShape.draw(),this.checkCollisions(this.currshape.blocks)?(this.currshape.undraw(),this.endGame()):this.interv=setInterval(()=>{this.pause||(this.checkCollisions(this.currshape.simulateDown)?(clearInterval(this.interv),this.stopRound()):this.currshape.moveDown())},1e3/(this.getLevel()/2+1))}stopRound(){for(let t of this.currshape.blocks)this.blocks[`${t.y}`].push(t);this.checkLines(),this.startRound()}changeHighScores(){let t={name:document.getElementById("name-field").value,score:this.score};localStorage.getObj("scores")||localStorage.setObj("scores",[]);let e=localStorage.getObj("scores");e.push(t),e=e.sort((t,e)=>t.score>e.score?-1:1),localStorage.setObj("scores",e)}endGame(){document.getElementById("start-button").removeEventListener("click",this.startFunction.bind(this)),this.currshape.undraw(),this.nextShape.undraw(),this.heldShape&&this.heldShape.undraw(),document.getElementById("game-over-screen").style.display="flex",clearInterval(this.interv),this.end=!0;for(let t=0;t<this.height;t++)this.blocks[`${t}`].forEach(t=>{t.undraw()}),this.blocks[`${t}`]=[];document.getElementById("go-to-menu-button").onclick=()=>{this.changeHighScores(),this.onDidEnd()}}getLevel(){return Math.floor(this.score/100)}checkLines(){let t=0;for(let e=this.height-1;e>=0;e--)this.blocks[`${e}`].length===this.width&&(t+=1,this.removeLine(e),e=this.height);this.updateScore(t)}updateScore(t){this.score+=t**2*10,document.getElementById("score-box").innerHTML=`Level: ${this.getLevel()+1} <br> Score: ${this.score}`,this.changeCombo(t)}changeCombo(t){let e=document.getElementById("times"),s=document.getElementById("combo-box");0!==t&&(e.innerHTML=`${t}x`,s.classList.add("info-block__combo-box-animation-class"),setTimeout(()=>s.classList.remove("info-block__combo-box-animation-class"),2e3))}removeLine(t){for(let e of this.blocks[`${t}`])e.undraw();this.blocks[`${t}`]=[];for(let e=t;e>0;e--){this.blocks[`${e}`]=this.blocks[`${e-1}`],this.blocks[0]=[];for(let t of this.blocks[`${e}`])t.y+=1,t.undraw(),t.draw()}}hold(){if(this.heldShape){let t=new this.heldShape.constructor(4,0),e=new this.currshape.constructor(12,10);this.heldShape.undraw(),this.heldShape=e,this.heldShape.draw(),this.currshape.undraw(),this.currshape=t,this.currshape.draw()}else clearInterval(this.interv),this.heldShape=new this.currshape.constructor(12,10),this.currshape.undraw(),this.heldShape.draw(),this.startRound()}slam(){for(clearInterval(this.interv);!this.checkCollisions(this.currshape.simulateDown);)this.currshape.moveDown();this.stopRound()}gamePause(){if(this.pause){this.pauseArr.forEach(t=>{t.draw()});for(let t=0;t<this.height;t++)this.blocks[`${t}`].forEach(t=>{t.transparent()});this.currshape.blocks.forEach(t=>{t.transparent()})}else{this.pauseArr.forEach(t=>{t.undraw()});for(let t=0;t<this.height;t++)this.blocks[`${t}`].forEach(t=>{t.opaque()});this.currshape.blocks.forEach(t=>{t.opaque()})}}setupKeyBindings(){window.addEventListener("keydown",t=>{this.pause||this.end||(39!==t.keyCode||this.checkCollisions(this.currshape.simulateRight)||this.currshape.moveRight(),37!==t.keyCode||this.checkCollisions(this.currshape.simulateLeft)||this.currshape.moveLeft(),40!==t.keyCode||this.checkCollisions(this.currshape.simulateDown)||this.currshape.moveDown(),32===t.keyCode&&this.slam(),t.keyCode==(localStorage.getItem("rotate")||82)&&(this.currshape.rotate(),this.checkRotateCollisions(this.currshape.blocks)&&this.currshape.rollback()),t.keyCode!=(localStorage.getItem("hold")||72)||this.held||(this.held=!0,this.hold())),t.keyCode!=(localStorage.getItem("pause")||80)||this.end||(this.pause=!this.pause,this.gamePause())})}checkCollisions(t){return t.some(t=>{if(t.x<0||t.x>=this.width||t.y>=this.height)return!0;for(let e=0;e<this.height;e++){let s=this.blocks[`${e}`];for(let e of s)if(t.x===e.x&&t.y===e.y)return!0}return!1})}checkRotateCollisions(t){return t.some(t=>{if(t.y>=this.height)return!0;for(let e=0;e<this.height;e++){let s=this.blocks[`${e}`];for(let e of s)if(t.x===e.x&&t.y===e.y)return!0}return!1})}}Storage.prototype.setObj=function(t,e){return this.setItem(t,JSON.stringify(e))},Storage.prototype.getObj=function(t){return JSON.parse(this.getItem(t))};class b{static launch(){localStorage.getObj("scores")&&(localStorage.getObj("scores").length<2?document.getElementById("high-score").innerHTML=`High Scores : <br> 1st : ${localStorage.getObj("scores")[0].name} -> ${localStorage.getObj("scores")[0].score}\n                                                                          <br> 2nd :\n                                                                          <br> 3rd : `:localStorage.getObj("scores").length<3?document.getElementById("high-score").innerHTML=`High Scores : <br> 1st : ${localStorage.getObj("scores")[0].name} -> ${localStorage.getObj("scores")[0].score}\n                                                                          <br> 2nd : ${localStorage.getObj("scores")[1].name} -> ${localStorage.getObj("scores")[1].score}\n                                                                          <br> 3rd : `:document.getElementById("high-score").innerHTML=`High Scores : <br> 1st : ${localStorage.getObj("scores")[0].name} -> ${localStorage.getObj("scores")[0].score}\n                                                                          <br> 2nd : ${localStorage.getObj("scores")[1].name} -> ${localStorage.getObj("scores")[1].score}\n                                                                          <br> 3rd : ${localStorage.getObj("scores")[2].name} -> ${localStorage.getObj("scores")[2].score}`),document.getElementsByClassName("keys")[0].innerHTML=`Keys: <br> ${String.fromCharCode(localStorage.rotate||82)}: rotate <br> ${String.fromCharCode(localStorage.hold||72)}: hold <br> ${String.fromCharCode(localStorage.pause||80)}: Pause/Unpause <br> Left/Right/Down Arrows: guess <br> Space: slam <br> M: Mute`,document.getElementById("keybindings-button").addEventListener("click",this.inputKeys),this.tetris=new p(10,20),this.tetris.run(()=>{this.launch()})}static inputKeys(){let t=document.getElementById("input-field");t.style.display="flex";let e=[],s=["rotate","hold","pause"];document.getElementById("key-instruction").innerHTML=`Please insert your ${s[0]} key :`,t.onkeydown=r=>{e.length<3&&(document.getElementById("key-instruction").innerHTML=`Please insert your ${s[e.length+1]} key :`,t.value=" ",e.push(r.keyCode)),3===e.length&&(document.getElementById("key-instruction").innerHTML="",t.style.display="none",localStorage.setItem("rotate",e[0]),localStorage.setItem("hold",e[1]),localStorage.setItem("pause",e[2]),document.getElementsByClassName("keys")[0].innerHTML=`Keys: <br> ${String.fromCharCode(localStorage.rotate)}: rotate <br> ${String.fromCharCode(localStorage.hold)}: hold <br> ${String.fromCharCode(localStorage.pause)}: Pause/Unpause <br> Left/Right/Down Arrows: guess <br> Space: slam <br> M: Mute`)}}static gameMute(){let t=document.getElementById("theme-music");t.paused?t.play():t.pause()}}window.addEventListener("keydown",t=>{77===t.keyCode&&b.gameMute()}),b.launch(),window.onload=()=>{let t=document.getElementById("theme-music");t.pause(),t.play()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,